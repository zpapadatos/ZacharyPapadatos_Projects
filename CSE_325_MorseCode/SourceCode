#include <stdio.h>
#include <string.h>
#include "board.h"
#include "peripherals.h"
#include "pin_mux.h"
#include "clock_config.h"
#include "MKL46Z4.h"
#include "fsl_debug_console.h"
#include <stdlib.h>
#include <ctype.h>

//millisecond timer obtained from video lecture
void delay_ms(unsigned int delay_t) {
    SIM->SCGC6 |= (1 << 24); // Clock Enable TPM0
    SIM->SOPT2 |= (0x2 << 24); // Set TPMSRC to OSCERCLK
    TPM0->CONF |= (0x1 << 17); // Stop on Overflow
    TPM0->SC = (0x1 << 7) | (0x07); // Reset Timer Overflow Flag, Set Prescaler 128
    TPM0->MOD = delay_t * 61 + delay_t/2; //

    TPM0->SC |= 0x01 << 3; // Start the clock!

    while(!(TPM0->SC & 0x80)){} // Wait until Overflow Flag
    return;
}

void endofodd(){
	GPIOE->PDOR |= (1<<29); //RED OFF
    GPIOD->PDOR &= ~(1<<5); //GREEN ON
    delay_ms(500);

	GPIOD->PDOR |= (1<<5); //GREEN OFF
    delay_ms(250);
}

void endofeven(){
	 GPIOD->PDOR |= (1<<5); //GREEN OFF
	 GPIOE->PDOR &= ~(1<<29); //RED ON
     delay_ms(500);

	 GPIOE->PDOR |= (1<<29); //RED OFF
	 delay_ms(250);
}

void Dash_outputodd() {
    GPIOD->PDOR |= (1<<5); //GREEN OFF
	GPIOE->PDOR &= ~(1<<29); //RED ON
	delay_ms(500);

	GPIOE->PDOR |= (1<<29); //RED OFF
	delay_ms(250);
}

void Dash_outputeven() {
	GPIOE->PDOR |= (1<<29); //RED OFF
	GPIOD->PDOR &= ~(1<<5); //GREEN ON
	delay_ms(500);

    GPIOD->PDOR |= (1<<5); //GREEN OFF
	delay_ms(250);
}

void Dot_outputodd() {
    GPIOD->PDOR |= (1<<5); //GREEN OFF
	GPIOE->PDOR &= ~(1<<29); //RED ON
	delay_ms(200);

	GPIOE->PDOR |= (1<<29); //RED OFF
	delay_ms(250);
}

void Dot_outputeven() {
	GPIOE->PDOR |= (1<<29); //RED OFF
	GPIOD->PDOR &= ~(1<<5); //GREEN ON
	delay_ms(200);

    GPIOD->PDOR |= (1<<5); //GREEN OFF
	delay_ms(250);
}

void space() {
	delay_ms(350);
}


void displayMorse(char* message, int length) {
	int wordcount = 1;

	for (int i = 0; i <= length ; i++) {
		char current = message[i];

		if (message[i] == '\0') {
			   if (wordcount == 0){
				endofeven();

			     }else{
				  endofodd();
		}
		}

		if ( current == ' '){
			space();
			wordcount = !wordcount;
		}

		else if (wordcount == 1){
	switch(toupper(current)) {
	case 'A':
    	Dot_outputodd();
		Dash_outputodd();
		delay_ms(350);
		break;

	case 'B':
		Dash_outputodd();
    	Dot_outputodd();
    	Dot_outputodd();
    	Dot_outputodd();
    	delay_ms(350);
    	break;

	case 'C':
		Dash_outputodd();
    	Dot_outputodd();
    	Dash_outputodd();
    	Dot_outputodd();
    	delay_ms(350);
    	break;

	case 'D':
		Dash_outputodd();
    	Dot_outputodd();
    	Dot_outputodd();
    	delay_ms(350);
    	break;

	case 'E':
		Dot_outputodd();
	    delay_ms(350);
	    break;

	case 'F':
    	Dot_outputodd();
    	Dot_outputodd();
		Dash_outputodd();
    	Dot_outputodd();
    	delay_ms(350);
    	break;

	case 'G':
		Dash_outputodd();
		Dash_outputodd();
		Dot_outputodd();
		delay_ms(350);
		break;

	case 'H':
		Dot_outputodd();
		Dot_outputodd();
		Dot_outputodd();
		Dot_outputodd();
		delay_ms(350);
		break;

	case 'I':
		Dot_outputodd();
		Dot_outputodd();
		delay_ms(350);
		break;

	case 'J':
		Dot_outputodd();
		Dash_outputodd();
		Dash_outputodd();
		Dash_outputodd();
		delay_ms(350);
		break;

	case 'K':
		Dash_outputodd();
		Dot_outputodd();
		Dash_outputodd();
		delay_ms(350);
		break;

	case 'L':
		Dot_outputodd();
		Dash_outputodd();
		Dot_outputodd();
		Dot_outputodd();
		delay_ms(350);
		break;

	case 'M':
		Dash_outputodd();
		Dash_outputodd();
		delay_ms(350);
		break;

	case 'N':
		Dash_outputodd();
		Dot_outputodd();
		delay_ms(350);
		break;

	case 'O':
		Dash_outputodd();
		Dash_outputodd();
		Dash_outputodd();
		delay_ms(350);
		break;

	case 'P':
		Dot_outputodd();
		Dash_outputodd();
		Dash_outputodd();
		Dot_outputodd();
		delay_ms(350);
		break;

	case 'Q':
		Dash_outputodd();
		Dash_outputodd();
		Dot_outputodd();
		Dash_outputodd();
		delay_ms(350);
		break;

	case 'R':
		Dot_outputodd();
		Dash_outputodd();
		Dot_outputodd();
		delay_ms(350);
		break;

	case 'S':
		Dot_outputodd();
		Dot_outputodd();
		Dot_outputodd();
		delay_ms(350);
		break;

	case 'T':
		Dash_outputodd();
		delay_ms(350);
		break;

	case 'U':
		Dot_outputodd();
		Dot_outputodd();
		Dash_outputodd();
		delay_ms(350);
		break;

	case 'V':
		Dot_outputodd();
		Dot_outputodd();
		Dot_outputodd();
		Dash_outputodd();
		delay_ms(350);
		break;

	case 'W':
		Dot_outputodd();
		Dash_outputodd();
		Dash_outputodd();
		delay_ms(350);
		break;

	case 'X':
		Dash_outputodd();
		Dot_outputodd();
		Dot_outputodd();
		Dash_outputodd();
		delay_ms(350);
		break;

	case 'Y':
		Dash_outputodd();
		Dot_outputodd();
		Dash_outputodd();
		Dash_outputodd();
		delay_ms(350);
		break;

	case 'Z':
		Dash_outputodd();
		Dash_outputodd();
		Dot_outputodd();
		Dot_outputodd();
		delay_ms(350);
		break;

	case '1':
		Dot_outputodd();
		Dash_outputodd();
		Dash_outputodd();
		Dash_outputodd();
		Dash_outputodd();
		delay_ms(350);
		break;

	case '2':
		Dot_outputodd();
		Dot_outputodd();
		Dash_outputodd();
		Dash_outputodd();
		Dash_outputodd();
		delay_ms(350);
		break;

	case '3':
		Dot_outputodd();
		Dot_outputodd();
	    Dot_outputodd();
 		Dash_outputodd();
 		Dash_outputodd();
		delay_ms(350);
		break;

	case '4':
		Dot_outputodd();
	    Dot_outputodd();
	    Dot_outputodd();
	    Dot_outputodd();
	    Dash_outputodd();
	    delay_ms(350);
	    break;

	case '5':
		Dot_outputodd();
		Dot_outputodd();
		Dot_outputodd();
		Dot_outputodd();
		Dot_outputodd();
		delay_ms(350);
		break;

	case '6':
		Dash_outputodd();
		Dot_outputodd();
		Dot_outputodd();
		Dot_outputodd();
		Dot_outputodd();
		delay_ms(350);
		break;

	case '7':
	    Dash_outputodd();
	    Dash_outputodd();
	    Dot_outputodd();
	    Dot_outputodd();
	    Dot_outputodd();
	    delay_ms(350);
	    break;

	case '8':
	    Dash_outputodd();
	    Dash_outputodd();
	    Dash_outputodd();
	    Dot_outputodd();
	    Dot_outputodd();
	    delay_ms(350);
	    break;

	case '9':
	    Dash_outputodd();
	    Dash_outputodd();
	    Dash_outputodd();
	    Dash_outputodd();
	    Dot_outputodd();
        delay_ms(350);
        break;

	case '0':
		Dash_outputodd();
		Dash_outputodd();
		Dash_outputodd();
		Dash_outputodd();
		Dash_outputodd();
		delay_ms(350);
		break;

	}
		}
		else if (wordcount == 0) {

		switch(toupper(current)) {
		case 'A':
	    	Dot_outputeven();
			Dash_outputeven();
			delay_ms(350);
			break;

		case 'B':
			Dash_outputeven();
	    	Dot_outputeven();
	    	Dot_outputeven();
	    	Dot_outputeven();
	    	delay_ms(350);
	    	break;

		case 'C':
			Dash_outputeven();
	    	Dot_outputeven();
	    	Dash_outputeven();
	    	Dot_outputeven();
	    	delay_ms(350);
	    	break;

		case 'D':
			Dash_outputeven();
	    	Dot_outputeven();
	    	Dot_outputeven();
	    	delay_ms(350);
	    	break;

		case 'E':
			Dot_outputeven();
		    delay_ms(350);
		    break;

		case 'F':
	    	Dot_outputeven();
	    	Dot_outputeven();
			Dash_outputeven();
	    	Dot_outputeven();
	    	delay_ms(350);
	    	break;

		case 'G':
			Dash_outputeven();
			Dash_outputeven();
			Dot_outputeven();
			delay_ms(350);
			break;

		case 'H':
			Dot_outputeven();
			Dot_outputeven();
			Dot_outputeven();
			Dot_outputeven();
			delay_ms(350);
			break;

		case 'I':
			Dot_outputeven();
			Dot_outputeven();
			delay_ms(350);
			break;

		case 'J':
			Dot_outputeven();
			Dash_outputeven();
			Dash_outputeven();
			Dash_outputeven();
			delay_ms(350);
			break;

		case 'K':
			Dash_outputeven();
			Dot_outputeven();
			Dash_outputeven();
			delay_ms(350);
			break;

		case 'L':
			Dot_outputeven();
			Dash_outputeven();
			Dot_outputeven();
			Dot_outputeven();
			delay_ms(350);
			break;

		case 'M':
			Dash_outputeven();
			Dash_outputeven();
			delay_ms(350);
			break;

		case 'N':
			Dash_outputeven();
			Dot_outputeven();
			delay_ms(350);
			break;

		case 'O':
			Dash_outputeven();
			Dash_outputeven();
			Dash_outputeven();
			delay_ms(350);
			break;

		case 'P':
			Dot_outputeven();
			Dash_outputeven();
			Dash_outputeven();
			Dot_outputeven();
			delay_ms(350);
			break;

		case 'Q':
			Dash_outputeven();
			Dash_outputeven();
			Dot_outputeven();
			Dash_outputeven();
			delay_ms(350);
			break;

		case 'R':
			Dot_outputeven();
			Dash_outputeven();
			Dot_outputeven();
			delay_ms(350);
			break;

		case 'S':
			Dot_outputeven();
			Dot_outputeven();
			Dot_outputeven();
			delay_ms(350);
			break;

		case 'T':
			Dash_outputeven();
			delay_ms(350);
			break;

		case 'U':
			Dot_outputeven();
			Dot_outputeven();
			Dash_outputeven();
			delay_ms(350);
			break;

		case 'V':
			Dot_outputeven();
			Dot_outputeven();
			Dot_outputeven();
			Dash_outputeven();
			delay_ms(350);
			break;

		case 'W':
			Dot_outputeven();
			Dash_outputeven();
			Dash_outputeven();
			delay_ms(350);
			break;

		case 'X':
			Dash_outputeven();
			Dot_outputeven();
			Dot_outputeven();
			Dash_outputeven();
			delay_ms(350);
			break;

		case 'Y':
			Dash_outputeven();
			Dot_outputeven();
			Dash_outputeven();
			Dash_outputeven();
			delay_ms(350);
			break;

		case 'Z':
			Dash_outputeven();
			Dash_outputeven();
			Dot_outputeven();
			Dot_outputeven();
			delay_ms(350);
			break;

		case '1':
			Dot_outputeven();
			Dash_outputeven();
			Dash_outputeven();
			Dash_outputeven();
			Dash_outputeven();
			delay_ms(350);
			break;

		case '2':
			Dot_outputeven();
			Dot_outputeven();
			Dash_outputeven();
			Dash_outputeven();
			Dash_outputeven();
			delay_ms(350);
			break;

		case '3':
			Dot_outputeven();
			Dot_outputeven();
		    Dot_outputeven();
	 		Dash_outputeven();
	 		Dash_outputeven();
			delay_ms(350);
			break;

		case '4':
			Dot_outputeven();
		    Dot_outputeven();
		    Dot_outputeven();
		    Dot_outputeven();
		    Dash_outputeven();
		    delay_ms(350);
		    break;

		case '5':
			Dot_outputeven();
			Dot_outputeven();
			Dot_outputeven();
			Dot_outputeven();
			Dot_outputeven();
			delay_ms(350);
			break;

		case '6':
			Dash_outputeven();
			Dot_outputeven();
			Dot_outputeven();
			Dot_outputeven();
			Dot_outputeven();
			delay_ms(350);
			break;

		case '7':
		    Dash_outputeven();
		    Dash_outputeven();
		    Dot_outputeven();
		    Dot_outputeven();
		    Dot_outputeven();
		    delay_ms(350);
		    break;

		case '8':
		    Dash_outputeven();
		    Dash_outputeven();
		    Dash_outputeven();
		    Dot_outputeven();
		    Dot_outputeven();
		    delay_ms(350);
		    break;

		case '9':
		    Dash_outputeven();
		    Dash_outputeven();
		    Dash_outputeven();
		    Dash_outputeven();
		    Dot_outputeven();
	        delay_ms(350);
	        break;
		case '0':
		    Dash_outputeven();
		    Dash_outputeven();
		    Dash_outputeven();
		    Dash_outputeven();
		    Dash_outputeven();
	        delay_ms(350);
	        break;

		}

		}
	}
}


int main(void) {
	int i = 0;
	int run = 0;

    /* Init board hardware. */
    BOARD_InitBootPins();
    BOARD_InitBootClocks();
    BOARD_InitBootPeripherals();

#ifndef BOARD_INIT_DEBUG_CONSOLE_PERIPHERAL
    /* Init FSL debug console. */
    BOARD_InitDebugConsole();
#endif

    SIM->SCGC5 |= 1<<13; //Enable red light PTE26
    SIM->SCGC5 |= 1<<12; //Enable green light PTD and yellow light
    SIM->SCGC5 |= 1<<11; //Enable the switches (bit 11)

    //Configure red
    PORTE->PCR[29] &= ~0x700;
    PORTE->PCR[29] |= 0x700 & (1 << 8);

    //Configure green
    PORTD->PCR[5] &= ~0x700;
    PORTD->PCR[5] |= 0x700 & (1 << 8);

    //Configure the switch
    PORTC->PCR[3] &= ~0x703;
	PORTC->PCR[3] |= 0x703 & ((1 << 8) | 0x3); //enable pullups and mux bits

	//Configure the switch
	PORTC->PCR[12] &= ~0x703;
	PORTC->PCR[12] |= 0x703 & ((1 << 8) | 0x3); //enable pullups and mux bits

	//Switch input
	GPIOC->PDDR &= ~(1<<3); //negative mask(zero only in a pin 3 location)

    //Set as output
    GPIOE->PDDR |= (1<<29); //red
    GPIOD->PDDR |= (1<<5); //green


    while(1){
    	i++;

    	if(!run){
    		char message[] = "ASU";
    		int length = strlen(message);
    		displayMorse(message, length);
    		run = 1;
    	}
    	if(!(GPIOC->PDIR & (1 << 3))) {
    		run = 0;


    	}
    }

    return 0;
}

