Author: Zachary Papadatos
In the first file hash.h- 

I first defined the node structure and made each node contain a key which stores a string and next which sets the pointer to the next node. Next I did the hash table class definition and this represents a hash table that uses an array of linked lists. It has the private members of size which stores the number of buckets in the table and a table that is an array of nodes. Finally in public we have the constructor, that computation of the hash value inserting a new value into a hash table, the printing of the first 5 slots of the has table, printing the number of elements in each slot, and finally the computation of the standard deviation. all of these are public methods for their use in hash.cpp. 

In the second file hash.cpp- 

In the hash.cpp file I have all of the above public methods a function. First I made the hash table constructor. this has size = k which stores the number of buckets and allocates an array of pointers, this also initializes the hash table. After that I have my insert function that allows the program to index using the hash_function() and will create a new node that will contain the key, and per instructions it uses chaining. After this I have the slot length calculator which will loop through each slot and count the numbers of elements inside the slot as long as the slot is not empty. Next I will give the printing of the first 5 slots function and I will do this by looping through the first 5 slots and printing the stored keys, it also prints the slot number even if that slot is read as empty. After that I have the standard deviation calculator that will compute the standard deviation, first it computes the mean, then it uses the variance formula to measure the spread of the slot sizes, finally it computes the standard deviation by finding the square root of the variance. Finally I have the actual hash function. It first will find the closest prime number from the list I have that is closest to the size of the list. after that I chose to implement a multiplicative hash which finds the hash value by -> (hash Value * closest Prime + c) mod size, I found that this approach helped me reduce collisions because the use of prime numbers will help distribute the keys more evenly and reduce clusters. 

Last I had the main.cpp file- 

There is all the variable declaration at the beginning, as well as the given tokenizer that I did not edit. After that I created and inserted each word into the hash table and then I didn't change the printouts given but I did put the/ call the expected values that were created in my hash.cpp file like printing the contents of the first 5, printing all the slot lengths, and calculating the standard deviation.
